name: "Frontend CI"

on:
  push:
    paths:
      - "frontend/**"
  pull_request:
    paths:
      - "frontend/**"

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: env injection
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/*/}"
          case "${BRANCH_NAME}" in
          prod)
            BASE_BACKEND_URL=https://backend.attestation.id
            ;;
          test)
            BASE_BACKEND_URL=https://backend-test.attestation.id
            ;;
          *)
            BASE_BACKEND_URL=https://backend-stage.attestation.id
            ;;
          esac
          echo "BASE_BACKEND_URL=${BASE_BACKEND_URL}" >> $GITHUB_ENV
      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_BASE_BACKEND_URL: ${{ env.BASE_BACKEND_URL }}
          envkey_RECAPTCHA_CLIENT_KEY: ${{ secrets.RECAPTCHA_CLIENT_KEY }}
          envkey_VALIDITY: 2592000
          envkey_ATTESTOR: AlphaWallet
          envkey_AUTH0_DOMAIN: auth0.attestation.id
          envkey_AUTH0_CLIENTID: 1muawhvAEzeLRAtUz41XIjWCsdhTf4e2
          file_name: frontend/.env
      - uses: actions/setup-node@v3
        with:
          node-version: 14
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json
      - run: |
          echo -n "Node version: "
          node -v
          echo -n "Npm version: "
          npm -v
      - name: frontend building
        run: |
          cd frontend/
          npm ci
          npm run build
      - uses: actions/upload-artifact@v3
        with:
          name: frontend
          path: frontend/public/

  # test-frontend:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: 14
  #         cache: "npm"
  #         cache-dependency-path: frontend/package-lock.json
  #     - run: |
  #         echo -n "Node version: "
  #         node -v
  #         echo -n "Npm version: "
  #         npm -v
  #     - name: testing
  #       run: |
  #         cd frontend/
  #         npm ci
  #         npm run test -- --ci --colors
  #     - uses: actions/upload-artifact@v3
  #       if: success() || failure()
  #       with:
  #         name: frontend-test-reports
  #         path: frontend/reports/
  #     - uses: IgnusG/jest-report-action@master
  #       if: success() || failure()
  #       with:
  #         access-token: ${{ secrets.GITHUB_TOKEN }}
  #         junit-file: reports/junit/junit.xml
  #         working-directory: frontend/

  deploy-frontend:
    needs:
      - build-frontend
      # - test-frontend
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (
      github.ref == 'refs/heads/prod' ||
      github.ref == 'refs/heads/test')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: frontend
          path: frontend/public/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1
      - name: inject env based on branch
        run: |
          if [ "${GITHUB_REF}" = prod ]; then
            S3_BUCKET=attestation-id-frontend
            CLOUDFRONT_ID=E21GE7V99U1LOT
          else
            S3_BUCKET=attestation-id-frontend-test
            CLOUDFRONT_ID=E2OMBEMU3MTR8V
          fi
          echo "S3_BUCKET=${S3_BUCKET}" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=${CLOUDFRONT_ID}" >> $GITHUB_ENV
      - name: deploy
        run: |
          aws s3 sync frontend/public/ "s3://${S3_BUCKET}/" --cache-control 'max-age=31536000' --quiet \
          && aws s3 cp "s3://${S3_BUCKET}/index.html" "s3://${S3_BUCKET}/index.html" --cache-control 'max-age=0,s-maxage=2592000' \
          && aws s3 cp "s3://${S3_BUCKET}/build/bundle.css" "s3://${S3_BUCKET}/build/bundle.css" --cache-control 'max-age=0,s-maxage=2592000' \
          && aws s3 cp "s3://${S3_BUCKET}/build/bundle.js" "s3://${S3_BUCKET}/build/bundle.js" --cache-control 'max-age=0,s-maxage=2592000' \
          && aws cloudfront create-invalidation --distribution-id "${CLOUDFRONT_ID}" --paths '/*'
