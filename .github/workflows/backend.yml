name: "Backend CI"

on:
  push:
    paths:
      - "backend/**"
      - "plugins/**"
  pull_request:
    paths:
      - "backend/**"
      - "plugins/**"

env:
  JAVA_VERSION: 11
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: attestation-id-backend
  ECS_CLUSTER: attestation-id-ecs
  TASK_DEFINITION_FAMILY: attestation-id-backend-task
  ECS_SERVICE: attestation-id-backend-svc
  ECS_CONTAINER: attestation-id-backend

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: "gradle"
      - name: Build with Gradle
        run: |
          java -version
          backend/gradlew clean shadowjar
      - uses: actions/upload-artifact@v3
        with:
          name: backend
          path: |
            backend/build/libs/
            plugins/*-plugin/build/libs/

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: calc docker tags
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          BRANCH="${GITHUB_REF##*/}"
          SHORT_SHA="${GITHUB_SHA:0:7}"
          IMAGES="${ECR_REGISTRY}/${ECR_REPOSITORY}:${BRANCH}-${SHORT_SHA},${ECR_REGISTRY}/${ECR_REPOSITORY}:${BRANCH}"
          if [ "${GITHUB_REF}" = 'refs/heads/main' ]; then
            IMAGES="${IMAGES},${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          fi
          echo "IMAGES=${IMAGES}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          pull: true
          push: ${{ github.event_name == 'push' && (
            github.ref == 'refs/heads/prod' ||
            github.ref == 'refs/heads/stage' ||
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/ci-testing'
            ) }}
          tags: ${{ env.IMAGES }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: "gradle"
      - name: Check with Gradle
        run: |
          java -version
          cd backend/
          ./gradlew check
      - uses: actions/upload-artifact@v3
        if: success() || failure()
        with:
          name: backend-test-reports
          path: backend/build/reports/
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v2
        if: success() || failure()
        with:
          report_paths: "**/build/test-results/test/TEST-*.xml"
          github_token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_failure: true

  deploy-backend:
    needs:
      - build-backend
      - test-backend
      - docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: calc docker tags
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          BRANCH="${GITHUB_REF##*/}"
          SHORT_SHA="${GITHUB_SHA:0:7}"
          IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${BRANCH}-${SHORT_SHA}"
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition "${TASK_DEFINITION_FAMILY}" --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER }}
          image: ${{ env.IMAGE }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 5

  deploy-backend-ec2:
    needs:
      - build-backend
      - test-backend
      - docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: backend
      - name: prepared for deployment
        run: |
          TMPDIR="$(mktemp -dp .)"
          mkdir -pv "${TMPDIR}/plugins"
          mv -fv backend/build/libs/*.jar "${TMPDIR}/backend-all.jar"
          mv -fv plugins/*-plugin/build/libs/*.jar "${TMPDIR}/plugins"
          echo "TMPDIR=${TMPDIR}" >> $GITHUB_ENV
      - name: rsync deployments
        uses: burnett01/rsync-deployments@5.2
        with:
          switches: -a
          path: ${{ env.TMPDIR }}
          remote_path: /tmp/
          remote_host: ec2-13-229-212-189.ap-southeast-1.compute.amazonaws.com
          remote_user: ubuntu
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: deploy
        uses: appleboy/ssh-action@master
        with:
          host: ec2-13-229-212-189.ap-southeast-1.compute.amazonaws.com
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            sudo bash -e <<EOF
            systemctl stop attestation-backend-test
            rm -frv /usr/local/attestation-test
            mv -fv "/tmp/${{ env.TMPDIR }}" /usr/local/attestation-test
            systemctl start attestation-backend-test
            rm -frv "/tmp/${{ env.TMPDIR }}"
            EOF
