name: "Backend CI"

on:
  push:
    paths:
      - "backend/**"
      - "plugins/**"
  pull_request:
    paths:
      - "backend/**"
      - "plugins/**"

env:
  AWS_REGION: ap-southeast-1
  ECR_REPOSITORY: attestation-id-backend
  ECS_CLUSTER: attestation-id-ecs
  ECS_CONTAINER: attestation-id-backend

jobs:
  backend-p1:
    uses: ./.github/workflows/backend-p1.yml

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: calc docker tags
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          BRANCH="${GITHUB_REF##*/}"
          SHORT_SHA="${GITHUB_SHA:0:7}"
          IMAGES="${ECR_REGISTRY}/${ECR_REPOSITORY}:${BRANCH}-${SHORT_SHA},${ECR_REGISTRY}/${ECR_REPOSITORY}:${BRANCH}"
          if [ "${GITHUB_REF}" = 'refs/heads/main' ]; then
            IMAGES="${IMAGES},${ECR_REGISTRY}/${ECR_REPOSITORY}:latest"
          fi
          echo "IMAGES=${IMAGES}" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./
          pull: true
          push: ${{ github.event_name == 'push' && (
            github.ref == 'refs/heads/prod' ||
            github.ref == 'refs/heads/stage' ||
            github.ref == 'refs/heads/main' ||
            github.ref == 'refs/heads/ci-testing'
            ) }}
          tags: ${{ env.IMAGES }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-backend:
    needs:
      - backend-p1
      - docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/prod'
    steps:
      - name: inject env based on branch
        run: |
          if [ "${GITHUB_REF}" = "refs/heads/prod" ]; then
            echo "TASK_DEFINITION_FAMILY=attestation-id-backend-task-prod" >> $GITHUB_ENV
            echo "ECS_SERVICE=attestation-id-backend-svc-prod" >> $GITHUB_ENV
          else
            echo "TASK_DEFINITION_FAMILY=attestation-id-backend-task-test" >> $GITHUB_ENV
            echo "ECS_SERVICE=attestation-id-backend-svc-test" >> $GITHUB_ENV
          fi
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: calc docker tags
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          BRANCH="${GITHUB_REF##*/}"
          SHORT_SHA="${GITHUB_SHA:0:7}"
          IMAGE="${ECR_REGISTRY}/${ECR_REPOSITORY}:${BRANCH}-${SHORT_SHA}"
          echo "IMAGE=${IMAGE}" >> $GITHUB_ENV
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition "${TASK_DEFINITION_FAMILY}" --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER }}
          image: ${{ env.IMAGE }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
          wait-for-minutes: 5
